There are a few suggestions I can make to potentially improve the efficiency of your code:

Use a dictionary to store the player information instead of a class: Instead of creating a class for each player, you can use a dictionary to store their information. This can simplify the code and make it more efficient.

Use sprite groups to manage game objects: Instead of storing the game objects (e.g. bullets, players, enemies) in separate lists, you can use sprite groups to manage them. This can make it easier to update and draw the game objects.

Use surfaces to blit game objects: Instead of blitting individual game objects, you can create surfaces for each game object and blit them onto the screen. This can help to reduce the number of blits per frame, which can improve the performance of the game.

Avoid using global variables: Global variables can make it difficult to track the state of the program and can cause bugs. Instead, try to pass variables as parameters or use a class to manage the game state.

Use Pygame's built-in collision detection: Pygame has built-in collision detection functions that can help to simplify collision detection between game objects. Instead of writing your own collision detection code, try to use Pygame's functions.

Use Pygame's clock to regulate the frame rate: Instead of using the time module to regulate the frame rate, you can use Pygame's built-in clock module. This can help to ensure that the game runs at a consistent frame rate on different systems.